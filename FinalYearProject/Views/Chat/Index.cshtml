@{
    ViewData["Title"] = "Chat with Bakery Assistant";
}
<head>
    <link rel="stylesheet" href="~/css/chat.css" />
    <!-- Add marked.js for markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<div class="chat-container" role="main" aria-label="Chat with bakery assistant">
    <div id="chatAnnouncer" class="chat-live-region" aria-live="assertive" aria-relevant="additions" aria-atomic="true"></div>
    <div class="chat-messages" id="chatMessages" role="log" aria-live="polite" aria-atomic="false">
    </div>
    <div class="chat-input-container">
        <label for="messageInput" class="visually-hidden">Type your message</label>
        <input type="text" id="messageInput" class="chat-input" placeholder="Type your message here..." aria-label="Type your message" />
        <button id="sendButton" class="chat-send-button">Send</button>
    </div>
</div>

@section Scripts {
    <script>
        // Ensure jQuery is loaded before executing this code
        $(document).ready(function () {
            // Configure marked.js to not render asterisks
            marked.setOptions({
                gfm: true,
                breaks: true
            });

            loadChatHistory();

            $('#messageInput').keypress(function (e) {
                if (e.which == 13) {
                    sendMessage();
                }
            });

            $('#sendButton').click(function () {
                sendMessage();
            });

            function loadChatHistory() {
                $.get('/Chat/GetChatHistory', function (messages) {
                    messages.forEach(function (message) {
                        appendMessage(message);
                    });
                    scrollToBottom();
                    
                    // Update message count for screen readers
                    if (messages.length > 0) {
                        $('#chatMessages').attr('aria-label', 'Chat messages, ' + messages.length + ' messages');
                    }
                });
            }

            function sendMessage() {
                var messageInput = $('#messageInput');
                var message = messageInput.val().trim();

                if (message) {
                    appendMessage({
                        role: 'user',
                        content: message
                    });

                    $.ajax({
                        url: '/Chat/SendMessage',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(message),
                        success: function (response) {
                            appendMessage(response);
                            scrollToBottom();
                        },
                        error: function (xhr, status, error) {
                            console.error("Error details:", xhr.responseText);
                            alert('Error sending message: ' + error);
                        }
                    });

                    messageInput.val('');
                }
            }

            function appendMessage(message) {
                // Format the content
                var content = message.content
                    .trim()
                    // Convert numbered list items while preserving line breaks
                    .replace(/(\d+\.)\s+(.*?)(?=(?:\n|$))/g, function(match, number, text) {
                        return `<li>${text.trim()}</li>\n`;
                    });

                // Add ol tags if we have list items
                if (content.includes('<li>')) {
                    var parts = content.split(/(?=<li>)/);
                    var intro = parts[0].trim();
                    var list = '<ol>' + parts.slice(1).join('').trim() + '</ol>';
                    content = intro + '\n' + list;
                }

                // Replace newlines with <br> tags
                content = content.replace(/\n/g, '<br>');

                var messageHtml = `
                    <div class="message ${message.role}" role="article" aria-label="${message.role} message">
                        <div class="message-content">${content}</div>
                    </div>
                `;
                $('#chatMessages').append(messageHtml);
                scrollToBottom();
                
                // Improved announcement for screen readers - force DOM update and use setTimeout
                var announcementText = `New message from ${message.role}: ${message.content.replace(/<[^>]*>/g, '')}`;
                var announcer = $('#chatAnnouncer');
                announcer.empty(); // Clear previous content
                
                // Use setTimeout to ensure DOM updates before adding new content
                setTimeout(function() {
                    announcer.text(announcementText);
                }, 50);
                
                // Update message count for screen readers
                const messageCount = $('#chatMessages .message').length;
                $('#chatMessages').attr('aria-label', 'Chat messages, ' + messageCount + ' messages');
            }

            function scrollToBottom() {
                var chatMessages = $('#chatMessages');
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }
        });
    </script>
}